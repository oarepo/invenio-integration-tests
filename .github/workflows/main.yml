# -*- coding: utf-8 -*-
#
# Copyright (C) 2023 CESNET.
#
# invenio-integration-tests is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

name: Oarepo integr.test builder

on:
  workflow_dispatch:

env:
  # keep the following consistent
  OAREPO_VERSION: 12
  APP_RDM_VERSION: "invenio-app-rdm>=12.0.0b2.dev1,<13"
  APP_RDM_VERSION_SEARCH: "invenio-app-rdm[opensearch2]>=12.0.0b2.dev1,<13"
  APP_RDM_FLAGS: "--pre"

jobs:
  start_and_test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - db: postgres
            invenio-sqlalchemy-database-uri: "postgresql+psycopg2://localhost:5432/invenio"
          - db: sqlite
            invenio-sqlalchemy-database-uri: "sqlite:////tmp/test.db"
    env:
      OPENSEARCH_PORT: 9200
      OPENSEARCH_VERSION: 2
      REDIS_VERSION: 6
      POSTGRES_VERSION: 14
      PYTHON_VERSION: "3.10"
      INVENIO_SQLALCHEMY_DATABASE_URI: ${{ matrix.invenio-sqlalchemy-database-uri }}
      POSTGRES_DB: invenio

    outputs:
      newtag: ${{ steps.bump_version.outputs.newtag }}

    steps:
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Opensearch ${{ env.OPENSEARCH_VERSION }}
        uses: ankane/setup-opensearch@v1
        with:
          opensearch-version: ${{ env.OPENSEARCH_VERSION }}
      - name: Redis ${{ env.REDIS_VERSION }}
        uses: shogo82148/actions-setup-redis@v1
        with:
          redis-version: ${{ env.REDIS_VERSION }}
      - name: Postgres ${{ env.POSTGRES_VERSION }}
        uses: ankane/setup-postgres@v1
        with:
          postgres-version: ${{ env.POSTGRES_VERSION }}
          database: ${{ env.POSTGRES_DB }}
        if: matrix.db == 'postgres'

      - name: Test opensearch on port ${{ env.OPENSEARCH_PORT }}
        run: |
          netstat -ntlp
          curl -s http://localhost:${{ env.OPENSEARCH_PORT }}
      - name: "Test redis: redis-cli ping"
        run: |
          redis-cli ping
      - name: Test postgres version ${{ env.POSTGRES_VERSION }}
        run: |
          psql -d ${{ env.POSTGRES_DB }} -c 'SHOW server_version'
        if: matrix.db == 'postgres'

      - name: Set up Node16
        uses: actions/setup-node@v4
        with:
          node-version: 16

      - name: Checkout oarepo/invenio-integration-tests
        uses: actions/checkout@v4

      - name: Show versions of programs
        run: |
          node --version
          python3 --version

      - name: Create test virtualenv
        run: |
          python3 -m venv .venv-tests
          . .venv-tests/bin/activate
          pip install -U setuptools pip wheel
          pip list

      - name: Create dependency resolution virtualenv (will be used in pdm)
        run: |
          cd pdm

          python3 -m venv .venv-oarepo-dependency
          . .venv-oarepo-dependency/bin/activate
          pip install -U setuptools pip wheel

      - name: Install pdm to pdm/.venv-pdm
        run: |
          cd pdm
          python3 -m venv .venv-pdm
          . .venv-pdm/bin/activate
          pip install -U setuptools pip wheel
          
          # install version bump
          pip install bump
          
          # install tools for merging requirements
          pip install click toml requirements-parser semver

          # install pdm
          pip install pdm

          PDM=$(which pdm)
          deactivate
          $PDM --version
          echo "PDM=$PDM" >> "$GITHUB_ENV"

          $PDM use -f "$PWD/.venv-oarepo-dependency"


      # this takes the latest version from pypi and unzips it.
      # using the pypi means that the installation has been done
      # and we can just use the egg-info/requires.txt
      - name: Download the latest invenio-app-rdm from pypi
        env:
          APP_RDM_VERSION: ${{ env.APP_RDM_VERSION }}
          APP_RDM_FLAGS: ${{ env.APP_RDM_FLAGS }}
        run: |
          # can use venv-tests here as only downloading the package
          . .venv-tests/bin/activate
          pip download --no-binary=:all: --no-deps --dest . "$APP_RDM_FLAGS" "$APP_RDM_VERSION"
          tar xf invenio-app-rdm*.tar.gz
          rm invenio-app-rdm*.tar.gz
          mv invenio-app-rdm* app-rdm
          cd app-rdm
          ls -la
          /bin/echo -e "\n=== rdm app requires: ==="
          cat invenio_app_rdm.egg-info/requires.txt

          cat invenio_app_rdm.egg-info/PKG-INFO | egrep '^Version: ' | sed 's/Version: //' > ../invenio_app_rdm_version.txt

          cat invenio_app_rdm.egg-info/requires.txt | grep invenio-rdm-records > ../invenio_rdm_records_version.txt
          echo "Will install invenio rdm records with version $(cat ../invenio_rdm_records_version.txt)"

      - name: Download the appropriate version of invenio-rdm-records from pypi
        run: |
          # can use venv-tests here as only downloading the package
          . .venv-tests/bin/activate
          pip download --no-binary=:all: --no-deps --dest . --pre "$(cat invenio_rdm_records_version.txt)"
          tar xf invenio-rdm-records*.tar.gz
          rm invenio-rdm-records*.tar.gz
          mv invenio-rdm-records* rdm-records
          cd rdm-records
          ls -la
          /bin/echo -e "\n=== rdm records requires: ==="
          cat invenio_rdm_records.egg-info/requires.txt

          cat invenio_rdm_records.egg-info/PKG-INFO | egrep '^Version: ' | sed 's/Version: //' > ../invenio_rdm_records_version.txt


      - name: Create initial PDM requirements
        run: |
          cd pdm
          . .venv-oarepo-dependency/bin/activate

          /bin/echo -e "\n=== merging requirements: ==="

          ${GITHUB_WORKSPACE}/pdm/.venv-pdm/bin/python ${GITHUB_WORKSPACE}/scripts/merge_requirements_to_pyproject_toml.py \
              pyproject.toml \
              ../app-rdm/invenio_app_rdm.egg-info/requires.txt ../rdm-records/invenio_rdm_records.egg-info/requires.txt \
              ${GITHUB_WORKSPACE}/requirements-extra.txt \
              --blacklisted-requirements-file ${GITHUB_WORKSPACE}/requirements-blacklisted.txt \
              --blacklisted-extras elasticsearch7,opensearch1 \
              --merge-extras opensearch2:default \
              --invenio-app-rdm-version $(cat ../invenio_app_rdm_version.txt) \
              --invenio-rdm-records-version $(cat ../invenio_rdm_records_version.txt)

      - name: Checkout oarepo/oarepo under ./oarepo
        uses: actions/checkout@v4
        with:
          repository: "oarepo/oarepo"
          ref: "rdm-${{ env.OAREPO_VERSION }}"
          token: "${{ secrets.INTEGRATION_TEST }}"
          path: "oarepo"

      - name: Show oarepo files and store its previous pyproject.toml
        run: |
          ls -lR oarepo
          cp oarepo/pyproject.toml oarepo/pyproject.toml.orig

      - name: Lock production requirements
        run: |
          cd pdm
          . .venv-oarepo-dependency/bin/activate
          ${GITHUB_WORKSPACE}/pdm/.venv-pdm/bin/pdm lock --prod --strategy cross_platform --group :all -v 2>&1 | grep -C 5 -i 'conflict'

          /bin/echo -e "\n=== built requirements (before blacklist) ==="
          ${GITHUB_WORKSPACE}/pdm/.venv-pdm/bin/pdm export --prod --format requirements --without-hashes

      - name: Export production oarepo requirements
        run: |
          cd pdm
          . .venv-oarepo-dependency/bin/activate

          ${GITHUB_WORKSPACE}/pdm/.venv-pdm/bin/python ${GITHUB_WORKSPACE}/scripts/export_requirements.py \
              ${GITHUB_WORKSPACE}/pdm/.venv-pdm/bin/pdm \
              pyproject.toml \
              ../oarepo/pyproject.toml \
              --skip tests \
              --blacklisted-requirements-file ${GITHUB_WORKSPACE}/requirements-blacklisted.txt

      - name: Lock test
        run: |
          cd pdm
          . .venv-oarepo-dependency/bin/activate

          # lock for tests
          ${GITHUB_WORKSPACE}/pdm/.venv-pdm/bin/pdm lock --strategy cross_platform --group :all -v 2>&1 | grep -C 5 -i 'conflict'

      - name: Export test oarepo requirements
        run: |
          cd pdm
          . .venv-oarepo-dependency/bin/activate

          ${GITHUB_WORKSPACE}/pdm/.venv-pdm/bin/python ${GITHUB_WORKSPACE}/scripts/export_requirements.py \
              ${GITHUB_WORKSPACE}/pdm/.venv-pdm/bin/pdm \
              pyproject.toml \
              ../oarepo/pyproject.toml \
              --only tests \
              --blacklisted-requirements-file ${GITHUB_WORKSPACE}/requirements-blacklisted.txt

      - name: Show exported requirements
        run: |
          /bin/echo -e "\n=== exported requirements ==="
          cat oarepo/pyproject.toml

      - name: Compare if the requirements have changed and skip the rest of steps if not
        run: |
          if [[ $(diff oarepo/pyproject.toml oarepo/pyproject.toml.orig) ]]; then
            echo "Requirements have changed, will continue with tests"
            RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION=yes
          else
            echo "Requirements have not changed, will skip the rest of the processing"
            RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION=no
          fi
          
          echo "RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION=$RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION" >> "$GITHUB_ENV"

      - name: Create react dependencies extraction venv
        if: env.RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION == 'yes'
        run: |
          python3 -m venv .venv-react
          . .venv-react/bin/activate
          pip install -U setuptools pip wheel

      - name: Install rdm to the extraction virtualenv
        if: env.RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION == 'yes'
        run: |
          .venv-react/bin/pip install "$APP_RDM_VERSION_SEARCH"

      - name: Run the extraction script
        if: env.RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION == 'yes'
        run: |
          . .venv-react/bin/activate
          python scripts/get_react_dependencies.py >oarepo/oarepo/react-dependencies.json


      - name: Bump oarepo version
        if: env.RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION == 'yes'
        id: bump_version
        run: |
          cd oarepo

          /bin/echo -e "\n=== original oarepo version: ==="
          grep '__version__' oarepo/version.py

          /bin/echo -e "\n=== BUMP: ==="
          NEWTAG=$(${GITHUB_WORKSPACE}/pdm/.venv-pdm/bin/bump oarepo/version.py oarepo/version.py)
          NEWTAG1=$(${GITHUB_WORKSPACE}/pdm/.venv-pdm/bin/bump pyproject.toml pyproject.toml)

          echo "new version: $NEWTAG, inside pyproject $NEWTAG1"
          if [[ "$NEWTAG" != "$NEWTAG1" ]]; then
            echo "ERROR: versions in oarepo/version.py and pyproject.toml differ"
            exit 1
          fi
          echo "NEWTAG=$NEWTAG" >> "$GITHUB_ENV"
          echo "newtag=$NEWTAG" >> "$GITHUB_OUTPUT"


      - name: Install simple repo
        if: env.RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION == 'yes'
        run: |
          . .venv-tests/bin/activate

          # install in non-editable mode
          pip install ./oarepo

          cd simple_repo
          pip install -e . --no-deps

      - name: Prepare invenio inside simple repo
        if: env.RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION == 'yes'
        run: |
          . .venv-tests/bin/activate
          export INVENIO_INSTANCE_PATH=$PWD/simple_repo/instance
          /bin/echo -e "\nINVENIO_INSTANCE_PATH: $INVENIO_INSTANCE_PATH"
          /bin/echo -e "\nINVENIO_SQLALCHEMY_DATABASE_URI: $INVENIO_SQLALCHEMY_DATABASE_URI"
          /bin/echo -e "\n=== invenio db init: ==="
          invenio db init
          /bin/echo -e "\n=== invenio db create: ==="
          invenio db create
          /bin/echo -e "\n=== invenio index init: ==="
          invenio index init
          /bin/echo -e "\n=== invenio webpack buildall: ==="
          invenio webpack buildall
          /bin/echo -e "\n=== invenio users create: ==="
          invenio users create --password aaaaaa -a -c test@test.com

      - name: test REST and pytest
        if: env.RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION == 'yes'
        env:
          REST_URL: https://127.0.0.1:5000/api/simple-records
        run: |
          . .venv-tests/bin/activate
          export INVENIO_INSTANCE_PATH=$PWD/simple_repo/instance
          export SRVLOG=$PWD/invenio_run.log
          /bin/echo -e "\n=== invenio tokens create: ==="
          TOKEN=$(invenio tokens create -n test -u test@test.com)
          /bin/echo -e "status: $?\n$TOKEN"
          /bin/echo -e "\n=== invenio run: ==="
          invenio run --cert ./simple_repo/test.crt --key ./simple_repo/test.key > $SRVLOG 2>&1 &
          INVEPID=$!
          trap "kill $INVEPID &>/dev/null; /bin/echo -e '\n=== $SRVLOG: ==='; cat $SRVLOG" EXIT
          /bin/echo "  PID: $INVEPID"
          sleep 8

          /bin/echo -e "\n=== REST 1 (POST new record w/o token): ==="
          RESULT=$(curl -sk -d '{"title":"blah"}' -X POST -H "content-type: application/json" "$REST_URL")
          /bin/echo -e "status: $?\n$RESULT"
          [[ $(jq '.status' <<<"$RESULT") -eq 403 ]]

          /bin/echo -e "\n=== REST 2 (POST new record): ==="
          RESULT=$(curl -sk -H "Authorization: Bearer $TOKEN" -d '{"title":"blah"}' -X POST -H "content-type: application/json" "$REST_URL")
          /bin/echo -e "status: $?\n$RESULT"
          [[ $(jq '.status' <<<"$RESULT") -lt 400 ]]
          RECORD_URL=$(jq -r '.links.self' <<<"$RESULT")
          /bin/echo -e "status: $?\nRECORD_URL: $RECORD_URL"

          /bin/echo -e "\n=== REST 3 (GET record): ==="
          RESULT=$(curl -sk "$RECORD_URL")
          /bin/echo -e "status: $?\n$RESULT"
          [[ $(jq '.status' <<<"$RESULT") -lt 400 ]]

          /bin/echo -e "\n=== REST 4 (PUT new title w/o token): ==="
          RESULT=$(curl -sk -d '{"title":"blah 1"}' -X PUT -H "content-type: application/json" "$RECORD_URL")
          /bin/echo -e "status: $?\n$RESULT"
          [[ $(jq '.status' <<<"$RESULT") -eq 403 ]]

          /bin/echo -e "\n=== REST 5 (PUT new title): ==="
          RESULT=$(curl -sk -H "Authorization: Bearer $TOKEN" -d '{"title":"blah 1"}' -X PUT -H "content-type: application/json" "$RECORD_URL")
          /bin/echo -e "status: $?\n$RESULT"
          [[ $(jq '.status' <<<"$RESULT") -lt 400 ]]

          /bin/echo -e "\n=== REST 6 (GET records on /api/simple-records): ==="
          RESULT=$(curl -sk -X GET "$REST_URL")
          /bin/echo -e "status: $?\n$RESULT"
          [[ $(jq '.status' <<<"$RESULT") -lt 400 ]]

          /bin/echo -e "\n=== REST 7 (DELETE record w/o token): ==="
          RESULT=$(curl -sk -X DELETE "$RECORD_URL")
          /bin/echo -e "status: $?\n$RESULT"
          [[ $(jq '.status' <<<"$RESULT") -eq 403 ]]

          /bin/echo -e "\n=== REST 8 (DELETE record): ==="
          RESULT=$(curl -sk -H "Authorization: Bearer $TOKEN" -X DELETE "$RECORD_URL")
          /bin/echo -e "status: $?\n$RESULT"
          [[ $(jq '.status' <<<"$RESULT") -lt 400 ]]

          /bin/echo -e "\n=== REST 9 (GET record): ==="
          RESULT=$(curl -sk "$RECORD_URL")
          /bin/echo -e "status: $?\n$RESULT"
          [[ $(jq '.status' <<<"$RESULT") -lt 500 ]]

      - name: Install UI test dependencies
        if: env.RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION == 'yes'
        run: |
          cd ui_tests/
          pwd
          npm ci
          npm install mocha -g

      - name: Run UI tests
        if: env.RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION == 'yes'
        env:
          REST_URL: https://127.0.0.1:5000/api/simple-records
        run: |
          . .venv-tests/bin/activate
          export INVENIO_INSTANCE_PATH=$PWD/simple_repo/instance
          export SRVLOG=$PWD/invenio_run.log
          /bin/echo -e "\n=== invenio tokens create: ==="
          TOKEN=$(invenio tokens create -n test -u test@test.com)
          /bin/echo -e "status: $?\n$TOKEN"
          /bin/echo -e "\n=== invenio run: ==="
          invenio run --cert ./simple_repo/test.crt --key ./simple_repo/test.key > $SRVLOG 2>&1 &
          INVEPID=$!
          trap "kill $INVEPID &>/dev/null; /bin/echo -e '\n=== $SRVLOG: ==='; cat $SRVLOG" EXIT
          /bin/echo "  PID: $INVEPID"
          sleep 8

          cd ui_tests/test/
          pwd
          mocha invenioIntegrationTests.spec.js

          /bin/echo -e "\n=== invenio index destroy --yes-i-know: ==="
          invenio index destroy --yes-i-know
          /bin/echo -e "\n=== invenio db destroy --yes-i-know: ==="
          invenio db destroy --yes-i-know


      - name: Install simple repo with python tests
        if: env.RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION == 'yes'
        run: |
          . .venv-tests/bin/activate
          pip install -e 'oarepo[tests]'
          cd simple_repo
          pip install -e '.[tests]'


      - name: Run pytest
        if: env.RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION == 'yes'
        run: |
          . .venv-tests/bin/activate
          export INVENIO_INSTANCE_PATH=$PWD/simple_repo/instance
          cd simple_repo
          /bin/echo -e "\n=== pytest tests: ==="
          pytest tests

      - name: Upload artifacts
        if: env.RUN_TESTS_AND_PUBLISH_NEW_OAREPO_VERSION == 'yes'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.db }}-artifacts4oarepo
          path: |
            oarepo/pyproject.toml
            oarepo/oarepo/version.py
            oarepo/oarepo/react-dependencies.json
          retention-days: 1


  push_to_oarepo:
    runs-on: ubuntu-latest
    needs: start_and_test
    env:
      # the newtag is empty if requirements have not changed, otherwise it is set to the new oarepo version
      NEWTAG: ${{ needs.start_and_test.outputs.newtag }}
    steps:
      - name: Intro debug
        run: |
          echo "About to push to oarepo, newtag: ${{ env.NEWTAG }}"
          echo "output from start_and_test job: ${{ needs.start_and_test.outputs.newtag }}"

      - name: Checkout oarepo/oarepo under ./oarepo
        if: env.NEWTAG != ''
        uses: actions/checkout@v4
        with:
          repository: "oarepo/oarepo"
          ref: "rdm-${{ env.OAREPO_VERSION }}"
          token: "${{ secrets.INTEGRATION_TEST }}"
          path: "oarepo"

      - name: Download artifacts
        if: env.NEWTAG != ''
        uses: actions/download-artifact@v4
        with:
          name: postgres-artifacts4oarepo
          path: oarepo

      - name: debug
        if: env.NEWTAG != ''
        run: |
          ls -l oarepo
          ls -l oarepo/oarepo
          echo -n "version:"
          cat oarepo/oarepo/version.py
          echo -n "pyproject.toml:"
          cat oarepo/pyproject.toml
          echo -n "react dependencies:"
          cat oarepo/oarepo/react-dependencies.json
          echo "newtag: ${{ env.NEWTAG }}"
          echo "event_name: ${{ github.event_name }}"

      - name: Commit and Push generated OARepo pyproject.toml with new requirements
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "[invenio-integration-tests] update requirements inside pyproject.toml (tag ${{ env.NEWTAG }})"
          branch: "rdm-${{ env.OAREPO_VERSION }}"
          file_pattern: pyproject.toml oarepo/version.py oarepo/react-dependencies.json
          repository: oarepo
          commit_user_name: integration-tests
          commit_user_email: integration-tests@oarepo.org
          tagging_message: ${{ env.NEWTAG }}
          # Optional options appended to `git-push`
          push_options: '--force'
        if: success() && (env.NEWTAG != '') && ( github.event_name == 'push' || github.event_name == 'workflow_dispatch' )
