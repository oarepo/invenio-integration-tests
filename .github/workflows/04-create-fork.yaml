# -*- coding: utf-8 -*-
#
# Copyright (C) 2024 CESNET.
#
# invenio-integration-tests is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

name: Create a fork of invenio rdm library

on:
  workflow_call:
    inputs:
      oarepo:
        description: OARepo version (12, ...)
        required: true
        default: "12"
        type: string
      python:
        description: Python version
        required: true
        default: "3.12"
        type: string
      package_and_version:
        description: "Package and version to fork"
        # input example: {"package": "invenio-communities", "version": "13.0.6", "features": ["kwargs-extension"]}
        required: true
        type: string

env:
  # keep the following consistent
  OAREPO_VERSION: ${{ inputs.oarepo }}
  OAREPO_MAJOR_VERSION: ${{ inputs.oarepo }}
  PYTHON_VERSION: ${{ inputs.python }}
  PACKAGE_AND_VERSION: ${{ inputs.package_and_version }}
  GH_TOKEN: ${{ github.token }}

jobs:
  main:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout oarepo/invenio-integration-tests
        uses: actions/checkout@v4

      - name: Setup environment variables
        uses: ./.github/actions/setup_env
        with:
          python-version: ${{ inputs.python }}
          oarepo-version: ${{ inputs.oarepo }}

      - name: Install python and tools
        uses: ./.github/actions/install_python
        with:
          python-version: ${{ inputs.python }}

      - name: Git globals
        run: |
          git config --global user.email "integration-tests@oarepo.org"
          git config --global user.name "OARepo Bot"

      - name: Convert package and version to environment variables
        run: |
          cat <<EOF >> $GITHUB_ENV
          
          PACKAGE=$(echo "${PACKAGE_AND_VERSION}" | jq -r '.package')
          VERSION=$(echo "${PACKAGE_AND_VERSION}" | jq -r '.version')
          FEATURES=$(echo "${PACKAGE_AND_VERSION}" | jq -c '.features')

          INVENIO_VERSION=v$(echo "${PACKAGE_AND_VERSION}" | jq -r '.version')
          OAREPO_VERSION=oarepo-$(echo "${PACKAGE_AND_VERSION}" | jq -r '.version')

          EOF
          
          cat $GITHUB_ENV

      - name: Clone the package
        uses: actions/checkout@v4
        with:
          repository: "oarepo/${{ env.PACKAGE }}"
          token: "${{ secrets.INTEGRATION_TEST }}"
          path: ".forks/${{env.PACKAGE}}"

      - name: Check if the package is already forked
        id: check_fork
        run: |
          cd .forks/${PACKAGE}
          git fetch --all

          git switch ${OAREPO_VERSION} && {
            echo "The fork already exists"
            echo "fork_already_exists=true" >> $GITHUB_ENV
            exit 0
          } || {
            echo "The fork does not exist, will try to create it"
            echo "fork_already_exists=false" >> $GITHUB_ENV
          }

      - name: Create a temporary fork of the package
        run: |
          cd .forks/${PACKAGE}
          git remote add upstream https://github.com/inveniosoftware/${PACKAGE}.git || true
          
          # remove a temporary fork
          git branch -D ${OAREPO_VERSION}-temporary || true
          
          # fetch invenio version and checkout it
          git fetch --tags upstream
          git fetch --all
          git checkout ${INVENIO_VERSION}
          
          # it is a tag, so create oarepo version from it
          git switch -c ${OAREPO_VERSION}-temporary
          
          git branch -a

      - name: Apply feature branches
        run: |
          cd .forks/${PACKAGE}
          
          apply_feature() {
            feature=$1
            feature_base=$2
            feature_branch="oarepo-feature-${feature}"
            
            echo "Applying feature branch $feature_branch based on $feature_base onto ${OAREPO_VERSION}-temporary"

            git checkout $feature_branch
            git checkout $feature_base
            git checkout ${OAREPO_VERSION}-temporary

            echo git rev-list ${feature_branch} ^${feature_base}
            git rev-list ${feature_branch} ^${feature_base}
            

            echo git cherry-pick --allow-empty --allow-empty-message ${feature_branch} ^${feature_base} 
            git cherry-pick --allow-empty --allow-empty-message ${feature_branch} ^${feature_base} || {
              echo "Cherry-pick failed"
              git diff
              exit 1
            }
          }
          
          echo "$FEATURES" | jq -c ".[]" | while read feature_rec ; do
            feature_name=$(echo $feature_rec | jq -r '.name')
            feature_base=$(echo $feature_rec | jq -r '.base')
            apply_feature $feature_name $feature_base
          done
          
          # add the features to a file that will be committed to the package so that later we know
          # that the package was patched with these features
          main_package=$(echo $PACKAGE | sed 's/-/_/g')

          cat <<EOF > ${main_package}/oarepo_changes.py
          # -*- coding: utf-8 -*-
          #
          # Copyright (C) 2024 CESNET.
          #
          # OARepo ecosystem is free software; you can redistribute it and/or modify it
          # under the terms of the MIT License; see LICENSE file for more details.
          #
          # This file was automatically generated by the integration tests to show which changes
          # were applied to the package.
          """Changes performed by oarepo-integration-tools."""

          # the code below is json, so need to define a couple of aliases just to be sure
          true = True
          """JSON True."""
          
          false = False
          """JSON False."""
          
          features_incorporated = $FEATURES
                  
          oarepo_major_version = "${OAREPO_MAJOR_VERSION}"

          package_oarepo_version = "${OAREPO_VERSION}"
          EOF
          
          black ${main_package}/oarepo_changes.py
          git add ${main_package}/oarepo_changes.py
          git commit -m "Summarized changes applied to the package"

          # TODO: consider marking the version of the package as .post999
          # as a security measure to prevent accidental use of the base package
          # in the presence of the forked one

      - name: Bump version to a post version
        run: |
          cd .forks/${PACKAGE}
          
          # bump the version to a post version
          init_py=${PACKAGE//-/_}/__init__.py
          cat ${init_py} | sed 's/^__version__ = .*/__version__ = "'${VERSION}'.post999"/' > ${init_py}.new
          mv ${init_py}.new ${init_py}

      - name: Run tests on the patched package
        run: |
          cd .forks/${PACKAGE}
          if [ $(git rev-parse --abbrev-ref HEAD) != ${OAREPO_VERSION}-temporary ] ; then
            echo "The current branch is not ${OAREPO_VERSION}-temporary - probably bug in previous steps"
            exit 1
          fi

          # do not check for black and isort - would make the patches too complicated          
          cp setup.cfg .setup.cfg.orig

          # add back lines removed by forks as they contain dependencies needed for the tests
          cat .setup.cfg.orig | sed "s/--black//" | sed 's/--isort//' | sed 's/--pydocstyle//' | sed 's/# removed-by-oarepo //' > setup.cfg
          cat setup.cfg

          uv venv --python=${PYTHON_VERSION}
          source .venv/bin/activate
          uv pip install -e '.[tests,opensearch2,s3,devs]'
          if [ -x ./run-tests.sh ] ; then
            ./run-tests.sh
          elif [ -x ./run_tests.sh ] ; then
            ./run_tests.sh
          else
            pytest tests
          fi
          
          mv .setup.cfg.orig setup.cfg

      - name: Rename a temporary fork to the final fork
        if: env.fork_already_exists != 'true'
        run: |
          cd .forks/${PACKAGE}
          git switch ${OAREPO_VERSION}-temporary
          git branch -m ${OAREPO_VERSION}
          echo "push_required=true" >> $GITHUB_ENV

      - name: Check if the temporary fork is the same as if original, if not, remove the original and rename temp to original
        if: env.fork_already_exists == 'true'
        run: |
          cd .forks/${PACKAGE}
          git diff ${OAREPO_VERSION} ${OAREPO_VERSION}-temporary
          git diff --exit-code ${OAREPO_VERSION} ${OAREPO_VERSION}-temporary || {
            git branch -D ${OAREPO_VERSION}
            git switch ${OAREPO_VERSION}-temporary
            git branch -m ${OAREPO_VERSION}
            echo "push_required=true" >> $GITHUB_ENV
          }

      - name: Push the fork to the repository
        if: env.push_required == 'true'
        run: |
          cd .forks/${PACKAGE}
          echo "Push is required as there are differences between the original and the temporary fork"
          git push --force --set-upstream origin ${OAREPO_VERSION}

      - name: Build the package
#        if: env.push_required == 'true'
        run: |
          cd .forks/${PACKAGE}
          source .venv/bin/activate
          pip install -U setuptools pip wheel
          python setup.py sdist bdist_wheel

      - name: Clone the pypi
#        if: env.push_required == 'true'
        uses: actions/checkout@v4
        with:
          repository: "oarepo/pypi"
          token: "${{ secrets.INTEGRATION_TEST }}"
          path: "pypi"

      - name: Copy the package to the pypi
#        if: env.push_required == 'true'
        run: |
          cp .forks/${PACKAGE}/dist/* pypi/packages
          cd pypi
          ./build.sh

      - name: Commit the package to the pypi
#        if: env.push_required == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "[invenio-integration-tests] adding package ${{ env.PACKAGE }} version ${{ env.VERSION }} to the pypi"
          file_pattern: packages/*
          repository: pypi
          commit_user_name: integration-tests
          commit_user_email: integration-tests@oarepo.org
          push_options: '--force'
